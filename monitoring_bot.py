import os
import asyncio
import logging
import json
from functools import wraps
import socket
import signal
import time

import database
from dotenv import load_dotenv
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from telegram.constants import ParseMode
from telegram.error import TelegramError

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

CONFIG_FILE = 'config.json'
config_lock = asyncio.Lock()
telegram_tag = ''

(
    AS_NAME, AS_HOST, AS_PORT,
    AC_ID,
    SI_VALUE
) = range(5)


async def load_json_async(lock, filename):
    async with lock:
        if not os.path.exists(filename) or os.path.getsize(filename) == 0:
            return {}
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)

async def save_json_async(lock, filename, data):
    async with lock:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

def escape_markdown(text: str) -> str:
    if not isinstance(text, str):
        text = str(text)
    escape_chars = r'_*[]()~`>+-=|{}.!'
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)

def admin_only(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        config = await load_json_async(config_lock, CONFIG_FILE)
        admin_chat_ids = config.get('admin_chat_ids', [])

        if user_id not in admin_chat_ids:
            if update.callback_query:
                await update.callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            else:
                await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

            user_tag = update.effective_user.username or 'N/A'
            logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ {func.__name__} –æ—Ç {user_id} (@{user_tag})")
            text = f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ `{func.__name__}` –æ—Ç @{user_tag} \\| `{user_id}`"
            for chat_id in admin_chat_ids:
                try:
                    await context.bot.send_message(chat_id, text, parse_mode=ParseMode.MARKDOWN_V2)
                except TelegramError as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–µ –≤ —á–∞—Ç {chat_id}: {e}")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

async def check_server(host, port, retries, delay, timeout):
    last_error = ""
    for attempt in range(retries):
        try:
            start_time = time.monotonic()
            _, writer = await asyncio.wait_for(asyncio.open_connection(host, port), timeout=timeout)
            end_time = time.monotonic()
            latency_ms = int((end_time - start_time) * 1000)
            writer.close()
            await writer.wait_closed()
            return True, "‚úÖ –û–Ω–ª–∞–π–Ω", latency_ms
        except asyncio.TimeoutError:
            last_error = "‚ùå –¢–∞–π–º–∞—É—Ç"
        except ConnectionRefusedError:
            last_error = "‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        except OSError as e:
            if isinstance(e, socket.gaierror):
                logger.warning(f"–û—à–∏–±–∫–∞ DNS –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {host}:{port}: {e}")
                return False, "‚ùå –û—à–∏–±–∫–∞ DNS", -1
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {host}:{port} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{retries}): {e.strerror}")
            last_error = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏"
        if attempt < retries - 1:
            await asyncio.sleep(delay)
    return False, last_error, -1

async def monitoring_job(context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot
    servers = database.get_servers()
    if not servers: return

    check_retries = context.bot_data.get('check_retries', 3)
    check_retry_delay = context.bot_data.get('check_retry_delay', 2)
    check_single_timeout = context.bot_data.get('check_single_timeout', 5)
    failure_threshold = context.bot_data.get('failure_threshold', 3)
    
    config = await load_json_async(config_lock, CONFIG_FILE)
    admin_chat_ids = config.get('admin_chat_ids', [])

    for server in servers:
        server_id = server['id']
        is_alive, _, latency_ms = await check_server(
            server['host'], server['port'],
            retries=check_retries, delay=check_retry_delay, timeout=check_single_timeout
        )

        database.update_server_status(server_id, is_alive, latency_ms)

        failure_counter_id = f"failure_count_{server_id}"
        alert_sent_id = f"alert_sent_{server_id}"
        
        current_failures = context.bot_data.get(failure_counter_id, 0)
        alert_was_sent = context.bot_data.get(alert_sent_id, False)

        if is_alive:
            if alert_was_sent:
                database.log_downtime_event(server_id, 'UP') 
                context.bot_data[alert_sent_id] = False 
                name = escape_markdown(server['name'])
                message = f"‚úÖ *–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï* ‚úÖ\n\n–°–µ—Ä–≤–µ—Ä *{name}* —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é\\!"
                for chat_id in admin_chat_ids:
                    try: await bot.send_message(chat_id, message, parse_mode=ParseMode.MARKDOWN_V2)
                    except TelegramError as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            if current_failures > 0:
                context.bot_data[failure_counter_id] = 0
        else:
            current_failures += 1
            context.bot_data[failure_counter_id] = current_failures
            if current_failures >= failure_threshold and not alert_was_sent:
                database.log_downtime_event(server_id, 'DOWN') 
                context.bot_data[alert_sent_id] = True
                name = escape_markdown(server['name'])
                host_adress = escape_markdown(f"{server['host']}")
                message = (f"üö® *–¢–†–ï–í–û–ì–ê: –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù* üö®\n\n"
                           f"*–ò–º—è:* {name}\n*–ê–¥—Ä–µ—Å:* `{host_adress}`\n\n"
                           f"–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ *{failure_threshold}* –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥\\. –í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ —Å–±–æ–π\\.")
                for chat_id in admin_chat_ids:
                    try: await bot.send_message(chat_id, message, parse_mode=ParseMode.MARKDOWN_V2)
                    except TelegramError as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

async def build_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu:status")],
        [InlineKeyboardButton("‚ö°Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="menu:check_now")],
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="conv_add_server:start"),
            InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="menu:remove_server_list"),
        ],
        [
            InlineKeyboardButton("üåç –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="menu:publish_list"),
            InlineKeyboardButton("üîí –°–∫—Ä—ã—Ç—å", callback_data="menu:hide_list"),
        ],
        [
            InlineKeyboardButton("üîî –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="conv_add_chat:start"),
            InlineKeyboardButton("üîï –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data="menu:remove_chat_list"),
        ],
        [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="conv_set_interval:start")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def get_status_text():
    config = await load_json_async(config_lock, CONFIG_FILE)
    all_servers = database.get_all_servers_with_status()
    chats_str = ", ".join(map(str, config.get('admin_chat_ids', [])))
    chats = escape_markdown(chats_str) if chats_str else "–ø—É—Å—Ç–æ"

    text_parts = [
        f"*–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:* {escape_markdown(config.get('check_interval_seconds', 'N/A'))} —Å–µ–∫—É–Ω–¥",
        f"*–ß–∞—Ç—ã –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:* `{chats}`",
        "\n*–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:*"
    ]
    if not all_servers:
        text_parts.append("_–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç_")
    else:
        for s in all_servers:
            name = escape_markdown(s['name'])
            host = escape_markdown(s['host'])
            text_parts.append(f"\\- *{name}* \\- `{host}:{s['port']}`")
    
    text_parts.append("\n*–°–µ—Ä–≤–µ—Ä–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ:*")
    public_servers = [s for s in all_servers if s['is_public']]
    if not public_servers:
        text_parts.append("_–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ_")
    else:
        for s in public_servers:
            name = escape_markdown(s['name'])
            host = escape_markdown(s['host'])
            text_parts.append(f"\\- *{name}* \\- `{host}:{s['port']}`")
            
    return "\n".join(text_parts)

async def perform_check_and_format(context: ContextTypes.DEFAULT_TYPE):
    servers = database.get_servers()
    if not servers: return "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—É—Å—Ç\\. –ù–µ—á–µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å\\.", False

    check_retries = context.bot_data.get('check_retries', 3)
    check_retry_delay = context.bot_data.get('check_retry_delay', 2)
    check_single_timeout = context.bot_data.get('check_single_timeout', 5)

    tasks = []
    for server in servers:
        task = asyncio.create_task(
            check_server(server['host'], server['port'], check_retries, check_retry_delay, check_single_timeout)
        )
        tasks.append((server, task))

    results = []
    for server, task in tasks:
        is_alive, _, latency = await task
        database.update_server_status(server['id'], is_alive, latency)
        ping_str = f"\\({latency}ms\\)" if latency != -1 else ""
        status_icon = "‚úÖ" if is_alive else "‚ùå"
        status_text = "–û–Ω–ª–∞–π–Ω" if is_alive else "–û—Ñ–ª–∞–π–Ω"
        name = escape_markdown(server['name'])
        host_link = f"http://{server['host']}"
        results.append(f"*{name}* {ping_str} [–∞–¥—Ä–µ—Å]({host_link}) \\- {status_icon} {status_text}")
    
    return "\n".join(results), True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    config = await load_json_async(config_lock, CONFIG_FILE)
    is_admin = user_id in config.get('admin_chat_ids', [])
    text = "üëã –ü—Ä–∏–≤–µ—Ç\\! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–≤–æ–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤\\.\n\n"

    query = update.callback_query
    if is_admin:
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
        keyboard = await build_main_menu_keyboard()
        if query:
            await query.answer()
            await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
        return

    if not config.get('admin_chat_ids'):
        text += (f"–°–µ–π—á–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, "
                 f"–¥–æ–±–∞–≤—å—Ç–µ —Å–µ–±—è –∫–æ–º–∞–Ω–¥–æ–π:\n`\\/add_chat {user_id}`")
    else:
        text += "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –±–æ—Ç–æ–º, –ø–∏—Å–∞—Ç—å @"+telegram_tag
    
    if query:
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2)


@admin_only
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "`/start` \\- –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "`/check_now` \\- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
        "`/status` \\- –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "`/add_server <–∏–º—è> <—Ö–æ—Å—Ç> <–ø–æ—Ä—Ç>` \\- –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
        "`/remove_server <–∏–º—è>` \\- –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
        "`/publish <–∏–º—è>` \\- –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –Ω–∞ —Å–∞–π—Ç–µ\n"
        "`/hide <–∏–º—è>` \\- –°–∫—Ä—ã—Ç—å —Å–µ—Ä–≤–µ—Ä —Å —Å–∞–π—Ç–∞\n"
        "`/add_chat <id>` \\- –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π\n"
        "`/remove_chat <id>` \\- –£–¥–∞–ª–∏—Ç—å —á–∞—Ç\n"
        "`/set_interval <—Å–µ–∫—É–Ω–¥—ã>` \\- –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2)

async def post_init(application: Application):
    commands = [
        BotCommand("start", "üöÄ –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("status", "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"),
        BotCommand("check_now", "‚ö°Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã"),
        BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
    ]
    await application.bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")



@admin_only
async def menu_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = await get_status_text()
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:back_to_main")]])
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)

@admin_only
async def menu_check_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É\\.\\.\\.", parse_mode=ParseMode.MARKDOWN_V2)
    final_text, _ = await perform_check_and_format(context)
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:back_to_main")]])
    await query.edit_message_text(final_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)

@admin_only
async def check_now_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = await update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...", parse_mode=ParseMode.MARKDOWN_V2)
    final_text, _ = await perform_check_and_format(context)
    await msg.edit_text(final_text, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)

@admin_only
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = await get_status_text()
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2)

@admin_only
async def add_server_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/add_server <–∏–º—è> <–¥–æ–º–µ–Ω/ip> <–ø–æ—Ä—Ç>`", parse_mode=ParseMode.MARKDOWN_V2)
        return
    port_str = args[-1]; host = args[-2]; name = " ".join(args[:-2])
    if not port_str.isdigit() or not 0 < int(port_str) < 65536:
        await update.message.reply_text("–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535.")
        return
    if database.add_server(name, host, int(port_str)):
        await update.message.reply_text(f"‚úÖ –°–µ—Ä–≤–µ—Ä `{escape_markdown(name)}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\\!", parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await update.message.reply_text("–°–µ—Ä–≤–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

@admin_only
async def remove_server_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = " ".join(context.args)
    if not name: await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞."); return
    if database.remove_server(name):
        await update.message.reply_text(f"üóëÔ∏è –°–µ—Ä–≤–µ—Ä '{escape_markdown(name)}' —É–¥–∞–ª–µ–Ω\\.", parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await update.message.reply_text("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
async def generic_list_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, item_type: str):
    query = update.callback_query
    await query.answer()

    items = []
    action_prefix = ""
    title = ""
    name_key, id_key = 'name', 'id'

    if item_type == 'remove_server':
        items = database.get_servers()
        action_prefix = "action_remove_server"
        title = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è *—É–¥–∞–ª–µ–Ω–∏—è*:"
    elif item_type == 'publish_server':
        items = [s for s in database.get_all_servers_with_status() if not s['is_public']]
        action_prefix = "action_publish"
        title = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è *–ø—É–±–ª–∏–∫–∞—Ü–∏–∏* –Ω–∞ —Å–∞–π—Ç–µ:"
    elif item_type == 'hide_server':
        items = [s for s in database.get_all_servers_with_status() if s['is_public']]
        action_prefix = "action_hide"
        title = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã *—Å–∫—Ä—ã—Ç—å* —Å —Å–∞–π—Ç–∞:"
    elif item_type == 'remove_chat':
        config = await load_json_async(config_lock, CONFIG_FILE)
        items = [{'id': chat_id, 'name': str(chat_id)} for chat_id in config.get('admin_chat_ids', [])]
        action_prefix = "action_remove_chat"
        title = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è *—É–¥–∞–ª–µ–Ω–∏—è* –∏–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:"
        id_key = name_key = 'id'

    if not items:
        title = "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:back_to_main")]]
    else:
        keyboard_buttons = [[InlineKeyboardButton(str(item[name_key]), callback_data=f"{action_prefix}:{item[id_key]}")] for item in items]
        keyboard_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:back_to_main")])
        keyboard = keyboard_buttons

    await query.edit_message_text(title, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)

@admin_only
async def generic_action_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action, item_id = query.data.split(':')
    message = "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    
    if action == "action_remove_server":
        server_to_remove = next((s for s in database.get_servers() if s['id'] == int(item_id)), None)
        if server_to_remove and database.remove_server(server_to_remove['name']):
            message = f"üóëÔ∏è –°–µ—Ä–≤–µ—Ä *{escape_markdown(server_to_remove['name'])}* —É–¥–∞–ª–µ–Ω\\."
    elif action == "action_publish" or action == "action_hide":
        is_public = action == "action_publish"
        server_to_update = next((s for s in database.get_all_servers_with_status() if s['id'] == int(item_id)), None)
        if server_to_update and database.set_server_public(server_to_update['name'], is_public):
            status = "—Ç–µ–ø–µ—Ä—å *–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è* –Ω–∞ —Å–∞–π—Ç–µ" if is_public else "–±–æ–ª—å—à–µ *–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è* –Ω–∞ —Å–∞–π—Ç–µ"
            message = f"‚úÖ –°–µ—Ä–≤–µ—Ä *{escape_markdown(server_to_update['name'])}* {status}\\."
    elif action == "action_remove_chat":
        chat_id_to_remove = int(item_id)
        config = await load_json_async(config_lock, CONFIG_FILE)
        if chat_id_to_remove in config.get('admin_chat_ids', []):
            config['admin_chat_ids'].remove(chat_id_to_remove)
            await save_json_async(config_lock, CONFIG_FILE, config)
            message = f"üîï –ß–∞—Ç `{chat_id_to_remove}` —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π\\."

    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:back_to_main")]])
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)

@admin_only
async def publish_server(update: Update, context: ContextTypes.DEFAULT_TYPE):
    server_name = " ".join(context.args)
    if not server_name: await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞."); return
    if database.set_server_public(server_name, True):
        await update.message.reply_text(f"‚úÖ –°–µ—Ä–≤–µ—Ä '{escape_markdown(server_name)}' —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.")
    else: await update.message.reply_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@admin_only
async def hide_server(update: Update, context: ContextTypes.DEFAULT_TYPE):
    server_name = " ".join(context.args)
    if not server_name: await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞."); return
    if database.set_server_public(server_name, False):
        await update.message.reply_text(f"üîí –°–µ—Ä–≤–µ—Ä '{escape_markdown(server_name)}' –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.")
    else: await update.message.reply_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def add_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = await load_json_async(config_lock, CONFIG_FILE)
    if config.get('admin_chat_ids') and update.effective_user.id not in config.get('admin_chat_ids', []):
        await update.message.reply_text("‚õî –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        return
    if not context.args or not context.args[0].lstrip('-').isdigit():
        await update.message.reply_text(f"–£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞\\. –í–∞—à –ª–∏—á–Ω—ã–π ID: `{update.effective_user.id}`", parse_mode=ParseMode.MARKDOWN_V2)
        return
    chat_id = int(context.args[0])
    if 'admin_chat_ids' not in config: config['admin_chat_ids'] = []
    if chat_id in config['admin_chat_ids']:
        await update.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ."); return
    
    config['admin_chat_ids'].append(chat_id)
    await save_json_async(config_lock, CONFIG_FILE, config)
    await update.message.reply_text(f"‚úÖ –ß–∞—Ç `{chat_id}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\\.", parse_mode=ParseMode.MARKDOWN_V2)

@admin_only
async def remove_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or not context.args[0].lstrip('-').isdigit(): await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞."); return
    chat_id = int(context.args[0])
    config = await load_json_async(config_lock, CONFIG_FILE)
    if chat_id not in config.get('admin_chat_ids', []):
        await update.message.reply_text("–≠—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ."); return
    config['admin_chat_ids'].remove(chat_id)
    await save_json_async(config_lock, CONFIG_FILE, config)
    await update.message.reply_text(f"üóëÔ∏è –ß–∞—Ç `{chat_id}` —É–¥–∞–ª–µ–Ω.", parse_mode=ParseMode.MARKDOWN_V2)

@admin_only
async def set_interval_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or not context.args[0].isdigit(): await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `\\/set_interval <—Å–µ–∫—É–Ω–¥—ã>`"); return
    new_interval = int(context.args[0])
    if new_interval < 30: await update.message.reply_text("–ò–Ω—Ç–µ—Ä–≤–∞–ª < 30 —Å–µ–∫—É–Ω–¥ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è."); return

    config = await load_json_async(config_lock, CONFIG_FILE)
    config['check_interval_seconds'] = new_interval
    await save_json_async(config_lock, CONFIG_FILE, config)
    
    current_jobs = context.job_queue.get_jobs_by_name("monitoring_job")
    for job in current_jobs: job.schedule_removal()
    context.job_queue.run_repeating(monitoring_job, interval=new_interval, name="monitoring_job", first=1)
    await update.message.reply_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_interval} —Å–µ–∫—É–Ω–¥.")


async def conv_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\\."
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:back_to_main")]])
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2)
    context.user_data.clear()
    return ConversationHandler.END

@admin_only
async def add_server_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    context.user_data['conv_message'] = await query.edit_message_text(
        "–®–∞–≥ 1/3: –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:", 
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="conv:cancel")]]), 
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return AS_NAME

@admin_only
async def add_server_get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['server_name'] = update.message.text
    await update.message.delete()
    conv_message = context.user_data['conv_message']
    await conv_message.edit_text(
        "–®–∞–≥ 2/3: –û—Ç–ª–∏—á–Ω–æ\\! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–¥–æ–º–µ–Ω –∏–ª–∏ IP-–∞–¥—Ä–µ—Å*:", 
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="conv:cancel")]]), 
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return AS_HOST

@admin_only
async def add_server_get_host(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['server_host'] = update.message.text
    await update.message.delete()
    conv_message = context.user_data['conv_message']
    await conv_message.edit_text(
        "–®–∞–≥ 3/3: –ü—Ä–∏–Ω—è—Ç–æ\\! –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: –≤–≤–µ–¥–∏—Ç–µ *–ø–æ—Ä—Ç*:", 
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="conv:cancel")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return AS_PORT

@admin_only
async def add_server_get_port(update: Update, context: ContextTypes.DEFAULT_TYPE):
    port_str = update.message.text
    await update.message.delete()
    conv_message = context.user_data['conv_message']
    
    text = ""
    if not port_str.isdigit() or not 0 < int(port_str) < 65536:
        text = "‚ùå *–û—à–∏–±–∫–∞:* –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535\\. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\\."
    else:
        name = context.user_data['server_name']
        host = context.user_data['server_host']
        if database.add_server(name, host, int(port_str)):
            text = f"‚úÖ –°–µ—Ä–≤–µ—Ä *{escape_markdown(name)}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\\!"
        else:
            text = f"‚ùå –°–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º *{escape_markdown(name)}* —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\\."

    await conv_message.edit_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:back_to_main")]]), parse_mode=ParseMode.MARKDOWN_V2)
    context.user_data.clear()
    return ConversationHandler.END

@admin_only
async def add_chat_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    context.user_data['conv_message'] = await query.edit_message_text(
        f"–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã\\.\n\n–í–∞—à ID: `{update.effective_user.id}`",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="conv:cancel")]]), 
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return AC_ID

@admin_only
async def add_chat_get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id_str = update.message.text
    await update.message.delete()
    conv_message = context.user_data['conv_message']
    text = ""
    
    if not chat_id_str.lstrip('-').isdigit():
        text = "‚ùå *–û—à–∏–±–∫–∞:* ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\\. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\\."
    else:
        chat_id = int(chat_id_str)
        config = await load_json_async(config_lock, CONFIG_FILE)
        if 'admin_chat_ids' not in config: config['admin_chat_ids'] = []
        if chat_id in config['admin_chat_ids']:
            text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ: –ß–∞—Ç `{chat_id}` —É–∂–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ\\."
        else:
            config['admin_chat_ids'].append(chat_id)
            await save_json_async(config_lock, CONFIG_FILE, config)
            text = f"‚úÖ –ß–∞—Ç `{chat_id}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π\\."
            try: await context.bot.send_message(chat_id, "‚úÖ –≠—Ç–æ—Ç —á–∞—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞.")
            except Exception: pass
            
    await conv_message.edit_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:back_to_main")]]), parse_mode=ParseMode.MARKDOWN_V2)
    context.user_data.clear()
    return ConversationHandler.END

@admin_only
async def set_interval_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    config = await load_json_async(config_lock, CONFIG_FILE)
    current_interval = config.get('check_interval_seconds', 'N/A')
    context.user_data['conv_message'] = await query.edit_message_text(
        f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: *{current_interval}* —Å–µ–∫—É–Ω–¥\\.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö \\(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –º–µ–Ω–µ–µ 30\\):",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="conv:cancel")]]),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    return SI_VALUE

@admin_only
async def set_interval_get_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    interval_str = update.message.text
    await update.message.delete()
    conv_message = context.user_data['conv_message']
    text = ""

    if not interval_str.isdigit():
        text = "‚ùå *–û—à–∏–±–∫–∞:* –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\\. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\\."
    elif int(interval_str) < 30:
        text = "‚ùå *–û—à–∏–±–∫–∞:* –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥\\. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\\."
    else:
        new_interval = int(interval_str)
        config = await load_json_async(config_lock, CONFIG_FILE)
        config['check_interval_seconds'] = new_interval
        await save_json_async(config_lock, CONFIG_FILE, config)
        
        current_jobs = context.job_queue.get_jobs_by_name("monitoring_job")
        for job in current_jobs: job.schedule_removal()
        context.job_queue.run_repeating(monitoring_job, interval=new_interval, name="monitoring_job", first=1)
        text = f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *{new_interval}* —Å–µ–∫—É–Ω–¥\\."
    
    await conv_message.edit_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:back_to_main")]]), parse_mode=ParseMode.MARKDOWN_V2)
    context.user_data.clear()
    return ConversationHandler.END

@admin_only
async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await update.message.reply_text("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è\\.\\.\\.", parse_mode=ParseMode.MARKDOWN_V2)

        pid = os.getpid()
        os.kill(pid, signal.SIGTERM)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É {pid}")

    except Exception as e:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: `{e}`", parse_mode=ParseMode.MARKDOWN_V2)

def main():
    database.migrate_db(); database.init_db()
    load_dotenv()
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    global telegram_tag; telegram_tag = os.getenv("TELEGRAM_TAG", "your_telegram_tag")
    if not token: logger.critical("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ .env! –í—ã—Ö–æ–¥."); return

    if not database.get_servers() and os.path.exists('servers.json'):
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ò–º–ø–æ—Ä—Ç –∏–∑ servers.json...")
        try:
            with open('servers.json', 'r', encoding='utf-8') as f:
                servers_data = json.load(f)
                for s in servers_data:
                    database.add_server(s['name'], s['host'], s['port'])
            logger.info("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. servers.json –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")
        except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã: {e}")

    if not os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump({"admin_chat_ids": [], "check_interval_seconds": 300}, f, indent=2)

    try:
        with open(CONFIG_FILE, 'r') as f: check_interval = json.load(f).get('check_interval_seconds', 300)
    except (FileNotFoundError, json.JSONDecodeError): check_interval = 300

    application = Application.builder().token(token).post_init(post_init).build()
    
    try:
        application.bot_data['check_retries'] = int(os.getenv("CHECK_RETRIES", 3))
        application.bot_data['check_retry_delay'] = int(os.getenv("CHECK_RETRY_DELAY", 2))
        application.bot_data['check_single_timeout'] = int(os.getenv("CHECK_SINGLE_TIMEOUT", 5))
        application.bot_data['failure_threshold'] = int(os.getenv("FAILURE_THRESHOLD", 3))
    except (ValueError, TypeError):
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        application.bot_data.update({'check_retries': 3, 'check_retry_delay': 2, 'check_single_timeout': 5, 'failure_threshold': 3})

    conv_add_server = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_server_start, pattern='^conv_add_server:start$')],
        states={
            AS_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_server_get_name)],
            AS_HOST: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_server_get_host)],
            AS_PORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_server_get_port)],
        },
        fallbacks=[CallbackQueryHandler(conv_cancel, pattern='^conv:cancel$'), CommandHandler('cancel', conv_cancel)],
        conversation_timeout=120
    )
    conv_add_chat = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_chat_start, pattern='^conv_add_chat:start$')],
        states={ AC_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_chat_get_id)] },
        fallbacks=[CallbackQueryHandler(conv_cancel, pattern='^conv:cancel$'), CommandHandler('cancel', conv_cancel)],
        conversation_timeout=60
    )
    conv_set_interval = ConversationHandler(
        entry_points=[CallbackQueryHandler(set_interval_start, pattern='^conv_set_interval:start$')],
        states={ SI_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_interval_get_value)] },
        fallbacks=[CallbackQueryHandler(conv_cancel, pattern='^conv:cancel$'), CommandHandler('cancel', conv_cancel)],
        conversation_timeout=60
    )
    
    application.add_handler(conv_add_server)
    application.add_handler(conv_add_chat)
    application.add_handler(conv_set_interval)
    
    command_handlers = [
        CommandHandler("start", start), CommandHandler("help", help_command),
        CommandHandler("status", status_command), CommandHandler("check_now", check_now_command),
        CommandHandler("add_server", add_server_command), CommandHandler("remove_server", remove_server_command),
        CommandHandler("publish", publish_server), CommandHandler("hide", hide_server),
        CommandHandler("set_interval", set_interval_command), CommandHandler("add_chat", add_chat_command),
        CommandHandler("remove_chat", remove_chat_command),CommandHandler("restart", restart_bot)
    ]
    application.add_handlers(command_handlers)
    
    application.add_handler(CallbackQueryHandler(start, pattern=r"^menu:back_to_main$"))
    application.add_handler(CallbackQueryHandler(menu_status, pattern=r"^menu:status$"))
    application.add_handler(CallbackQueryHandler(menu_check_now, pattern=r"^menu:check_now$"))
    
    application.add_handler(CallbackQueryHandler(lambda u,c: generic_list_menu(u,c,'remove_server'), pattern=r"^menu:remove_server_list$"))
    application.add_handler(CallbackQueryHandler(lambda u,c: generic_list_menu(u,c,'publish_server'), pattern=r"^menu:publish_list$"))
    application.add_handler(CallbackQueryHandler(lambda u,c: generic_list_menu(u,c,'hide_server'), pattern=r"^menu:hide_list$"))
    application.add_handler(CallbackQueryHandler(lambda u,c: generic_list_menu(u,c,'remove_chat'), pattern=r"^menu:remove_chat_list$"))

    application.add_handler(CallbackQueryHandler(generic_action_handler, pattern=r"^action_"))

    if application.job_queue:
        application.job_queue.run_repeating(monitoring_job, interval=check_interval, name="monitoring_job", first=5)
    
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫.")
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏: –ü–æ–ø—ã—Ç–æ–∫={application.bot_data['check_retries']}, –ü–æ—Ä–æ–≥ —Å–±–æ–µ–≤={application.bot_data['failure_threshold']}.")
    
    application.run_polling()


if __name__ == "__main__":
    main()